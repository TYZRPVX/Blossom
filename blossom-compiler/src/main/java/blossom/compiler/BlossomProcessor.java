package blossom.compiler;


import android.content.res.Resources;

import com.google.auto.service.AutoService;
import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.TypeSpec;
import com.squareup.javapoet.TypeVariableName;

import java.io.IOException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;

import javax.annotation.processing.AbstractProcessor;
import javax.annotation.processing.Filer;
import javax.annotation.processing.ProcessingEnvironment;
import javax.annotation.processing.Processor;
import javax.annotation.processing.RoundEnvironment;
import javax.lang.model.element.Element;
import javax.lang.model.element.Modifier;
import javax.lang.model.element.TypeElement;
import javax.lang.model.util.Elements;

import blossom.annotations.TieString;

@AutoService(Processor.class)
public class BlossomProcessor extends AbstractProcessor {

    private Elements elementUtils;
    private Filer filer;

    @Override
    public Set<String> getSupportedAnnotationTypes() {

        Set<String> types = new LinkedHashSet<>();
        types.add(TieString.class.getCanonicalName());
        return types;
    }

    @Override
    public synchronized void init(ProcessingEnvironment env) {
        super.init(env);
        elementUtils = env.getElementUtils();
        filer = env.getFiler();
    }

    static String nameHandler(String targetName) {
        // // MainActivity_TieHandler
        return targetName + "_TieHandler";
    }

    @Override
    public boolean process(Set<? extends TypeElement> set, RoundEnvironment roundEnvironment) {


        // @TieString
        Map<TypeElement, Set<Element>> statementSummary = new HashMap<>(); // {MainActivity:[appName, buttonName]}
        for (Element element : roundEnvironment.getElementsAnnotatedWith(TieString.class)) {
//            int id = element.getAnnotation(TieString.class).value();

            TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
            if (statementSummary.containsKey(enclosingElement)) {
                Set<Element> elements = statementSummary.get(enclosingElement);
                elements.add(element);
            } else {
                Set<Element> elements = new HashSet<>();
                elements.add(element);
                statementSummary.put(enclosingElement, elements);
            }
//            String targetClassName = enclosingElement.getSimpleName().toString();
//            String packageName = enclosingElement.getQualifiedName().toString();
//
//            ClassName className = ClassName.get(enclosingElement);
//            TypeVariableName typeVariableName = TypeVariableName.get("T", className);
//
//            tieStringBuilder.addStatement("target.$L = res.getString($L)", element.getSimpleName(), id);
//
//
//            TypeSpec handler = TypeSpec.classBuilder(nameHandler(targetClassName))
//                    .addModifiers(Modifier.PUBLIC)
//                    .addTypeVariable(typeVariableName)
//                    .addMethod(build)
//                    .build();
//
//            JavaFile javaFile = JavaFile.builder(packageName, handler)
//                    .build();
//            try {
//                javaFile.writeTo(processingEnv.getFiler());
//            } catch (IOException e) {
//                e.printStackTrace();
//            }
        }
        brewTieStringJava(statementSummary);

        return false;
    }

    public void brewTieStringJava(Map<TypeElement, Set<Element>> statementSummary) {
        for (TypeElement typeElement : statementSummary.keySet()) {

            ClassName className = ClassName.get(typeElement);
            TypeVariableName typeVariableName = TypeVariableName.get("T", className);
            MethodSpec.Builder tieStringBuilder = MethodSpec.constructorBuilder()
                    .addModifiers(Modifier.PUBLIC)
                    .addParameter(typeVariableName, "target")
                    .addParameter(Resources.class, "res")
                    .addJavadoc("Auto generated by Blossom");

            Set<Element> elements = statementSummary.get(typeElement);
            for (Element element : elements) {
                int id = element.getAnnotation(TieString.class).value();
                tieStringBuilder.addStatement("target.$L = res.getString($L)", element.getSimpleName(), id);
            }

            String targetClassName = typeElement.getSimpleName().toString();
            String packageName = typeElement.getEnclosingElement().toString();

            TypeSpec handler = TypeSpec.classBuilder(nameHandler(targetClassName))
                    .addModifiers(Modifier.PUBLIC)
                    .addTypeVariable(typeVariableName)
                    .addMethod(tieStringBuilder.build())
                    .build();

            JavaFile file = JavaFile.builder(packageName, handler).build();

            try {
                file.writeTo(filer);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
}
